pipeline {
    agent any
     tools {
		jfrog 'jfrog-cli'
        go '1.22.4'
        dockerTool 'docker'
	}
    parameters {
        choice(name: 'ENV', choices: ['dev', 'stage', 'prod'], description: 'Deployment environment')
        string(name: 'BUILDNAME', defaultValue: 'gogs', description: 'Build Name')
    }
    environment {
        ARTIFACTORY_URL = credentials('docker-registry-url')
        ARTIFACTORY_DOMAIN = credentials('docker-registry-domain')
    }
    stages {
        stage('Checkout') {
             steps {
                script {
                    git branch: 'jira-67-create-jenkins-pipelines-for-gogs-app-deployment', credentialsId: 'gitcreds', url: 'git@github.com:CapybaraDevOps/gogs-infrastructure.git'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    sh '''
                    git clone --depth 1 https://github.com/gogs/gogs.git gogs
                    cd gogs
                    go build -o gogs

                    mv ../jenkins/Dockerfile ../
                    cd ..
                    docker build -t ${params.BUILDNAME}:${BUILD_NUMBER} .
                    '''
                }
            }
        }
        stage('Docker Push') {
         steps {
                script {
                    def hash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

                    def imageTag = "${env.ARTIFACTORY_URL}/${params.ENV}-${params.BUILDNAME}-go-local/${params.BUILDNAME}:$BUILD_NUMBER-${hash}"
                    sh "docker tag ${params.BUILDNAME}:$BUILD_NUMBER ${imageTag}"
                    
                    withCredentials([usernamePassword(credentialsId: 'dcr-p-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD ${env.ARTIFACTORY_DOMAIN}"
                        sh "docker push ${imageTag}"
                        sh "docker logout ${env.ARTIFACTORY_URL}"
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            sh 'docker system prune -a -f'
            sh 'go clean -cache'
        }
    }
}
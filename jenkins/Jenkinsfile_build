pipeline {
    agent any
     tools {
		jfrog 'jfrog-cli'
        go '1.22.4'
        dockerTool 'docker'
	}
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to pull changes')
        // choice(name: 'ENV', choices: [], description: 'Deployment environment')
        string(name: 'BUILDNAME', defaultValue: 'test', description: 'Build Name')
    }
    environment {
        BUILD_NUMBER = 0
        // ARTIFACTORY_URL = credentials('docker-registry-url')
        // ARTIFACTORY_DOMAIN = credentials('docker-registry-domain')
    }
    stages {
        stage('Checkout') {
             steps {
                script {
                    git branch: "${params.BRANCH}", credentialsId: 'jenkins-ssh-git-key', url: 'git@github.com:nuwmdiploma/gogs-infrastructure.git'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    sh '''
                        #!/usr/bin/env bash
                        set -euxo pipefail

                        # 1) Clone and build Gogs
                        git clone --depth 1 https://github.com/gogs/gogs.git gogs
                        cd gogs
                        go build -o gogs

                        # 2) Move the Dockerfile into the workspace root
                        mv ../jenkins/Dockerfile ../
                        cd ..

                        # 3) Build the Docker image, using the Jenkins parameters as env vars
                        docker build -t "${BUILDNAME}:${BUILD_NUMBER}" .
                        '''
                }
            }
        }
        // stage('Docker Push') {
        //  steps {
        //         script {
        //             def hash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

        //             def imageTag = "${env.ARTIFACTORY_URL}/${params.ENV}-${params.BUILDNAME}-go-local/${params.BUILDNAME}:$BUILD_NUMBER-${hash}"
        //             sh "docker tag ${params.BUILDNAME}:$BUILD_NUMBER ${imageTag}"
                    
        //             withCredentials([usernamePassword(credentialsId: 'dcr-p-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
        //                 sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD ${env.ARTIFACTORY_DOMAIN}"
        //                 sh "docker push ${imageTag}"
        //                 sh "docker logout ${env.ARTIFACTORY_URL}"
        //             }
        //         }
        //     }
        // }
    }
    post {
        always {
            cleanWs()
            sh 'docker system prune -a -f'
            sh 'go clean -cache'
        }
    }
}

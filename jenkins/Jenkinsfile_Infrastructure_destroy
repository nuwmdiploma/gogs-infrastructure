pipeline {
    agent any
    tools {
        terraform 'terraform'
    }
    parameters {
        choice(name: 'ENV', choices: ['stage', 'dev', 'prod'], description: 'Deployment environment')
        string(name: 'ENV_VARIABLE', defaultValue: '01', description: 'ENV Variable')
        choice(name: 'REGION', choices: ['europe'], description: 'Select the region')
        choice(name: 'ZONE', choices: ['west4'], description: 'Select the zone')
        string(name: 'PROJECT_NAME', defaultValue: 'gogs', description: 'Project name')
        string(name: 'JFROG_REGISTRY', defaultValue: 'docker.capybara.pp.ua', description: 'Jfrog registry domain')
        choice(name: 'JFROG_REPOSITORY', choices: ['stage-gogs-go-local/gogs', 'dev-gogs-go-local/gogs', 'prod-gogs-go-local/gogs'] , description: 'Jfrog registry domain')
        string(name: 'JFROG_IMAGE_TAG', defaultValue: 'latest', description: 'Gogs image tag')
    }
    stages {
        stage('Checkout') { 
            steps {
                git branch: 'main', url: "git@github.com:CapybaraDevOps/gogs-infrastructure.git", credentialsId: 'gitcreds'
            }
        }
        stage('Init') {
            steps {
                script {
                    def environmentGOGS = "${params.ENV}-${params.ENV_VARIABLE}-${params.REGION}-${params.ZONE}-${params.PROJECT_NAME}"
                    echo "Selected environment GOGS: ${environmentGOGS}"
                    env.GOGS_ENV = environmentGOGS
                }
				withCredentials([string(credentialsId: 'docker-jfrog-password', variable: 'JFROG_PASSWORD')]) {
                    script {
                        env.TF_VAR_jfrog_password = "${JFROG_PASSWORD}"
                        env.TF_VAR_jfrog_registry = "${JFROG_REGISTRY}"
                        env.TF_VAR_jfrog_repository = "${JFROG_REPOSITORY}"
                        env.TF_VAR_gogs_build_tag = "${JFROG_IMAGE_TAG}"
                    }
                }
                withCredentials([file(credentialsId: 'terraform-gogs', variable: 'GOOGLE_CREDENTIALS')]) {
                    dir('terraform/gogs-app') {
                        sh 'make init'
                    }
                }
            }
        }
        stage('Destroy') {
            steps {
                withCredentials([file(credentialsId: 'terraform-gogs', variable: 'GOOGLE_CREDENTIALS')]) {
                    dir('terraform/gogs-app') {
                        sh 'make destroy'
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}